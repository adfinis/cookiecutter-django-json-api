[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "0.0.0"
description = "{{cookiecutter.description}}"
repository = "{{cookiecutter.url}}"
authors = ["{{cookiecutter.organization_slug}}"]
license = "GPL-3.0-or-later"
readme = "../README.md"

[tool.poetry.dependencies]
python = "^3.12"
django = "^4.2.11"
django-environ = "^0.11.2"
django-filter = "^24.2"
djangorestframework = "^3.15.2"
djangorestframework-jsonapi = "^7.0.2"
gunicorn = "^22.0.0"
mozilla-django-oidc = "^4.0.1"
psycopg2 = "^2.9.9"

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.3"
factory-boy = "^3.3.0"
gitlint = "^0.19.1"
pdbpp = "^0.10.3"
pre-commit = "^3.7.1"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-django = "^4.8.0"
pytest-env = "^1.1.3"
pytest-factoryboy = "^2.7.0"
pytest-freezer = "^0.4.8"
pytest-mock = "^3.14.0"
pytest-randomly = "^3.15.0"
requests-mock = "^1.12.1"

[tool.ruff]
exclude = [
    "migrations",
]
line-length = 88

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "A003",     # `flake8-builtins` - Class attribute {name} is shadowing a Python builtin
    "ANN",      # `flake8-annotations`
    "ARG",      # `flake8-unused-arguments`
    "COM812",   # handled by ruff format
    "D100",     # Missing docstring in public module
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "D105",     # Missing docstring in magic method
    "D106",     # Missing docstring in public nested class
    "D107",     # Missing docstring in __init__
    "D202",     # No blank lines allowed after function docstring (found {num_lines})
    "D203",     # 1 blank line required before class docstring
    "D212",     # Multi-line docstring summary should start at the first line
    "DJ001",    #  flake8-django` - Avoid using null=True on string-based fields
    "E501",     # Line too long ({width} > {limit} characters) - managed by ruff format
    "ERA001",   # eradicate - Found commented-out code
    "FA100",    # `future-rewritable-type-annotation` - obsolete in python >= 3.9
    "FBT002",   # `flake8-boolean-trap` - Boolean default positional argument in function definition
    "FBT003",   # Boolean positional value in function call
    "FIX",      # `flake8-fixme`
    "ISC001",   # handled by ruff format
    "N818",     # Exception name {name} should be named with an Error suffix - https://github.com/astral-sh/ruff/issues/5367
    "PERF203",  # `try-except-in-loop` - obsolete in python >= 3.11
    "PGH005",   # doesn't work correctly with `requests-mock`
    "PLR0913",  # Too many arguments to function call
    "PLR2004",  # Magic value used in comparison, consider replacing {value} with a constant variable
    "PT006",    # Wrong name(s) type in @pytest.mark.parametrize, expected {expected}
    "PT017",    # Found assertion on exception {name} in except block, use pytest.raises() instead
    "PLW2901",  # `for` loop variable `search_term` overwritten by assignment target
    "RET502",   # Do not implicitly return None in function able to return non-None value
    "RET503",   # Missing explicit return at the end of function able to return non-None value
    "RUF001",   # ambiguous-unicode-character-string
    "RUF012",   # Mutable class attributes should be annotated with typing.ClassVar
    "S101",     # Use of assert detected
    "TD002",    # missing-todo-author
    "TD003",    # missing-todo-link
    "TID252",   # banned-module-level-imports
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["{{cookiecutter.project_name}}"]
combine-as-imports = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.per-file-ignores]
"manage.py" = ["INP001"]

[tool.pytest.ini_options]
addopts = "--reuse-db --randomly-seed=1521188766 --randomly-dont-reorganize"
DJANGO_SETTINGS_MODULE = "{{cookiecutter.project_name}}.settings"
env = [
    "ADMINS=Test Example <test@example.com>,Test2 <test2@example.com>",
]
filterwarnings = [
    "error::DeprecationWarning",
    "error::PendingDeprecationWarning",
    "ignore:distutils Version classes are deprecated. Use packaging.version instead.:DeprecationWarning",  # issue in pytest-freezer
    "ignore:CSR support in pyOpenSSL is deprecated. You should use the APIs in cryptography.:DeprecationWarning"
]

[tool.coverage.run]
source = ["."]

[tool.coverage.report]
fail_under = 100
exclude_lines = [
    "pragma: no cover",
    "pragma: todo cover",
    "def __str__",
    "def __unicode__",
    "def __repr__",
]
omit = [
    "*/migrations/*",
    "*/apps.py",
    "manage.py",
    "{{cookiecutter.project_name}}/settings_*.py",
    "{{cookiecutter.project_name}}/wsgi.py",
]
show_missing = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
